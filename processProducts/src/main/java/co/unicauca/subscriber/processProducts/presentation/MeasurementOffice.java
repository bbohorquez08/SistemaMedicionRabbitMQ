package co.unicauca.subscriber.processProducts.presentation;

import co.unicauca.sistemamedicion.microkernel.common.entities.ItemMedicionElemento;
import co.unicauca.subcriber.processProduct.service.ServiceProcessProduct;
import co.unicauca.subscriber.processProduct.acces.ConnectDB;
import co.unicauca.subscriber.processProduct.model.Measurement;
import co.unicauca.subscriber.processProducts.infra.ISubscriber;
import co.unicauca.subscriber.processProducts.infra.RabbitListener;
import com.google.gson.Gson;
import java.awt.Color;
import static java.lang.System.exit;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author mfcaicedo, bbohorquez, elcamacho, yavigutierrez, juanjosz
 */
public class MeasurementOffice extends javax.swing.JFrame implements ISubscriber {

    DefaultListModel modelList;
    ServiceProcessProduct objService;
    /**
     * Creates new form DeliveryOffice
     */
    public MeasurementOffice() {
        initComponents();
        Runnable subscriber = new RabbitListener(this);
        this.objService = new ServiceProcessProduct();
        new Thread(subscriber).start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPaneInfoDatosProductos = new javax.swing.JScrollPane();
        jTableInfoElementProcess = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButtonSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTableInfoElementProcess.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Producto", "Ancho Real(cm)", "Alto Real(cm)", "Peso Real(kg)", "Ancho Ideal(cm)", "Alto Ideal(cm)", "Peso Ideal(kg)", "Tipo", "Estado"
            }
        ));
        jScrollPaneInfoDatosProductos.setViewportView(jTableInfoElementProcess);

        jPanel1.add(jScrollPaneInfoDatosProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 810, 180));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("TABLA DE LOS PRODUCTOS PROCESADOS");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 870, -1));

        jButtonSalir.setBackground(new java.awt.Color(194, 47, 47));
        jButtonSalir.setText("Salir");
        jPanel1.add(jButtonSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 230, 60, -1));

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MeasurementOffice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MeasurementOffice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MeasurementOffice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MeasurementOffice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MeasurementOffice delivery = new MeasurementOffice();
                delivery.setVisible(true);
                //Cargamos la información de la base de datos
                try {
                    delivery.obtenerMediciones();

                } catch (SQLException ex) {
                    Logger.getLogger(MeasurementOffice.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    /**
     * Realiza un manejo de la informacion que llega para poder cargar la tabla y guardar los datos
     * @param msg mensaaje recibido
     */
    @Override
    public void onMessage(String msg) {
        System.out.println("msg: " + msg);
        //Todo hago split al template de string que llega como mensaje 
        String[] partes = msg.split(",");
        //Todo construyo el objeto 
        Measurement objM = new Measurement(0, partes[0], Float.parseFloat(partes[1]),
                Float.parseFloat(partes[2]), Float.parseFloat(partes[3]), Float.parseFloat(partes[4]),
                Float.parseFloat(partes[5]), Float.parseFloat(partes[6]), partes[7], 
                partes[8]);
        // Guardo en la base de datos 
        try {
            int response = 0;
            response = objService.addMeasurement(objM);
            if(response != 1){
                JOptionPane.showMessageDialog(this,"Error al insertar la medición a la db", "Insertar Medición", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(MeasurementOffice.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Cargo la tabla con los nuevos valores 
        cargarTabla(partes);
    }
    /**
     * cargar la tabla con la informacion proporcionada
     * @param partes array que cntiene la informacion del producto medido
     */
    private void cargarTabla(String [] partes){
        Object [] fila = new Object[9];
        fila[0]=partes[0];
        fila[1]=partes[1];
        fila[2]=partes[2];
        fila[3]=partes[3];
        fila[4]=partes[4];
        fila[5]=partes[5];
        fila[6]=partes[6];
        fila[7]=partes[7];
        fila[8]=partes[8];
        DefaultTableModel modelo =(DefaultTableModel) this.jTableInfoElementProcess.getModel(); 
        modelo.addRow(fila); 
        this.jTableInfoElementProcess.setModel(modelo);
    }
    /**
     * Se obtienen las mediciones de la DB y se muestran por interfaz 
     * @throws SQLException se capturan posibles excepciones  
     */
    private void obtenerMediciones() throws SQLException{
        ArrayList<Measurement> lstMeasurement = new ArrayList<>();
        lstMeasurement = this.objService.getMeasurements();
        String estado; 
        if(!lstMeasurement.isEmpty()){
            Object matriz[][] = new Object[lstMeasurement.size()][9];
            for(int i = 0; i < lstMeasurement.size(); i++){
                matriz[i][0] = lstMeasurement.get(i).getNombreProducto();
                matriz[i][1] = lstMeasurement.get(i).getAnchoReal();
                matriz[i][2] = lstMeasurement.get(i).getAltoReal();
                matriz[i][3] = lstMeasurement.get(i).getPesoReal();
                matriz[i][4] = lstMeasurement.get(i).getAnchoIdeal();
                matriz[i][5] = lstMeasurement.get(i).getAltoIdeal();
                matriz[i][6] = lstMeasurement.get(i).getPesoIdeal();
                matriz[i][7] = lstMeasurement.get(i).getTipoProducto();
                matriz[i][8] = lstMeasurement.get(i).getEstadoProducto();

                this.jTableInfoElementProcess.setModel(new DefaultTableModel(
                matriz, 
                new String[]{"Producto", "Ancho real (cm)", "Alto real (cm)", "Peso real (kg)",
                            "Ancho ideal(cm)", "Alto ideal(cm)", "Peso ideal(kg)", "Tipo", "Estado"}
                ));
                estado = lstMeasurement.get(i).getEstadoProducto();
                CellRenderer render = new CellRenderer(estado);
                jTableInfoElementProcess.setDefaultRenderer(Object.class, render);
            }
        }else{
            JOptionPane.showMessageDialog(this, "Actualmente no tiene mediciones guardadas en la DB","Mediciones", JOptionPane.WARNING_MESSAGE);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPaneInfoDatosProductos;
    private javax.swing.JTable jTableInfoElementProcess;
    // End of variables declaration//GEN-END:variables


}
